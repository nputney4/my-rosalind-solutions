def Con_Pro():
    #this is a weird thing that is needed so the last DNA sequence is appended to a list
    with open('potato.txt','a') as f:
        f.write('>')
    with open('potato.txt', 'r') as f:
        list1=[]
        s = ''
        t = []
        for lines in f:
            if lines[0] == '>':
                list1.append(s)
                s = ''
            else:
                s+=lines
    #all off the DNA sequences are now in a list but still have all of the \n thingies so they are being replaced with spaces
    list1 = [l.replace('\n', '') for l in list1]
    
    #the index [1:] is used because the first element in the list is just an empty string - '' 
    for seq in list1[1:]:
        t.append(list(seq))
    array = np.array(t)


    i=0
    A = ''
    C = ''
    G = ''
    T = ''
    con = ''
    #this will go as many times as there are base pairs in the sequence, i.e. array[0,0:] indicates all of the 0th row
    while i < len(array[0, 0:]):
        numA = 0
        numC = 0 
        numG = 0
        numT = 0
    #this will take all off the characters in a column and add up the number of A/C/G/Ts
        for char in array[:,i]:
            if char == 'A':
                numA+=1
            if char == 'C':
                numC+=1
            if char == 'G':
                numG+=1
            if char == 'T':
                numT+=1
            
        i+=1
        z = 0
        a = max(numA,numC,numG,numT)
        
        #this will add stuff to the consesus string - the continue line is to prevent more than one base being added each time through
        #the while loop is a way for the if statements not to continue but the code after it can still happen
        while z < 1:         
            
            if max(numA,numC,numG,numT) == numA:
                con+='A'
                z+=1
                continue
            if max(numA,numC,numG,numT) == numC:
                con+='C'
                z+=1
                continue
            if max(numA,numC,numG,numT) == numG:
                con+='G'
                z+=1
                continue
            if max(numA,numC,numG,numT) == numT:
                con+='T'
                z+=1
                continue
        #adding the number of A/T/C/G present in each column after each run through
        A += str(numA) + ' '
        C += str(numC) + ' '
        G += str(numG) + ' '
        T += str(numT) + ' '
    #printing the things :)    
    print(con)
    print('A: ', A)
    print('C: ', C)
    print('G: ', G)
    print('T: ', T)